module statics/relational

imports statics/base
imports statics/arithmetic
imports statics/type

imports signatures/relational-sig



rules 
   
  // (e1 > e2)
  typeOfExp(s, exp@Gt(e1, e2)) = BOOL() :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) != UNTYPED() | error $[Wrong operand types for operator Mod: [e1] has type [T1],[e2] has type [T2]],
    @exp.type := BOOL().

  // (e1 >= e2)
  typeOfExp(s, exp@Gte(e1, e2)) = BOOL() :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) != UNTYPED() | error $[Wrong operand types for operator Mod: [e1] has type [T1],[e2] has type [T2]],
    @exp.type := BOOL().

  // (e1 < e2)
  typeOfExp(s, exp@Lt(e1, e2)) = BOOL() :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) != UNTYPED() | error $[Wrong operand types for operator Mod: [e1] has type [T1],[e2] has type [T2]],
    @exp.type := BOOL().

  // (e1 <= e2)
  typeOfExp(s, exp@Lte(e1, e2)) = BOOL() :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) != UNTYPED() | error $[Wrong operand types for operator Mod: [e1] has type [T1],[e2] has type [T2]],
    @exp.type := BOOL().
    
  // (e1 == e2)
  typeOfExp(s, exp@Eq(e1, e2)) = BOOL() :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    orB(
      typeCompatibleB(T1, T2),
      typeCompatibleB(T2, T1)
    ) == TRUE() | error $[Wrong operand types for operator Eq: [e1] has type [T1],[e2] has type [T2]],
    @exp.type := BOOL().

  // (e1 != e2)
  typeOfExp(s, exp@Neq(e1, e2)) = BOOL() :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    orB(
      typeCompatibleB(T1, T2),
      typeCompatibleB(T2, T1)
    ) == TRUE() | error $[Wrong operand types for operator NotEq: [e1] has type [T1],[e2] has type [T2]],
    @exp.type := BOOL().
    
  typeOfExp(_, exp@True()) = BOOL() :-
    @exp.type := BOOL().

  typeOfExp(_, exp@False()) = BOOL() :-
    @exp.type := BOOL().
   
    
    
