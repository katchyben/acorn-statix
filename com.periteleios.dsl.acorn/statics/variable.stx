module statics/variable

imports statics/base
imports statics/type

imports signatures/variable-sig



signature
  constructors
    LIST1 : TYPE -> TYPE

rules // variables

  typeOfExp(s, exp@Var(x)) = T :-
    variableType(s, x) == T,
    @exp.type := T.
  
  typeOfSimpleExp(s, exp@SimpleVar(x)) = T :-
    variableType(s, x) == T,
    @exp.type := T.

  typeOfExp(s, FieldAccess(exp@FAVar(var), x)) = propertyType :- {s_entity varType}
    variableType(s, var) == varType,
    @exp.type := varType,
    varType == ENTITY(s_entity) | error $[Cannot resolve [exp] to an entity] @exp,
    propertyType(s_entity, x) == propertyType,
    @x.type := propertyType.

  typeOfExp(s, FieldAccess(FAExp(exp), x)) = propertyType :- {s_entity}
    typeOfExp(s, exp) == ENTITY(s_entity) | error $[Cannot resolve [exp] to an entity] @exp,
    propertyType(s_entity, x) == propertyType,
    @x.type := propertyType.
    
   typeOfSimpleExp(s, SimpleFieldAccess(exp, x)) = propertyType :- {s_entity}
    typeOfSimpleExp(s, exp) == ENTITY(s_entity) | error $[Cannot resolve [exp] to an entity] @exp,
    propertyType(s_entity, x) == propertyType,
    @x.type := propertyType.
    
 rules //Binding 
 
  varDeclOk : scope * scope * Exp  
  varDeclInitOk : scope * scope * Exp 
  varDeclInferredOk : scope * scope * Exp 
  
  varDeclOk(s, s_decl, VarDecl(x, sort)) :- {T}
    T == typeOfSort(s, sort),
    inequalType(T, UNTYPED()) | error $[Unknown type [sort]] @sort,
    declVar(s_decl, x, T).

  varDeclInitOk(s, s_decl, VarDeclInit(x, sort, exp)) :- {T}
    T == typeOfSort(s, sort),
    equalType(T, typeOfExp(s, exp)) | error $[Expression [exp] is not of type [sort]] @exp,
    declVar(s_decl, x, T).

  varDeclInferredOk(s, s_decl, VarDeclInitInferred(x, exp)) :- {T}
    T == typeOfExp(s, exp),
    inequalType(T, UNTYPED()) | error $[Unable to infer type of [exp]] @exp,
    declVar(s_decl, x, T).
      
    
rules // list and set creation

  typeOfExp(s, ListLiteral([])) = UNTYPED() :- false | error $[Type cannot be determined for empty untyped list creation].
  typeOfExp(s, lc@ListLiteral([hd | tl])) = LIST(T) :-
    T == typeOfExp(s, hd), // first element of the untyped list creation determines the type
    typesCompatibleWith(T, typesOfExps(s, tl)) | error $[Not all elements are compatible with type [T]] @tl,
    @lc.type := LIST(T).

  typeOfExp(s, tlc@TypedListLiteral(sort, exps)) = LIST(T) :-
    typeOfSort(s, sort) == T,
    typesCompatibleWith(T, typesOfExps(s, exps)) | error $[Not all elements are compatible with type [T]] @exps,
    @tlc.type := LIST(T).

  typeOfExp(s, SetLiteral([])) = UNTYPED() :- false | error $[Type cannot be determined for empty untyped set creation].
  typeOfExp(s, sc@SetLiteral([hd | tl])) = SET(T) :-
    T == typeOfExp(s, hd), // first element of the untyped set creation determines the type
    typesCompatibleWith(T, typesOfExps(s, tl)) 
    | error $[Not all elements are compatible with type [T]] @tl,
    @sc.type := SET(T).

  typeOfExp(s, tsc@TypedSetLiteral(sort, exps)) = SET(T) :-
    typeOfSort(s, sort) == T,
    typesCompatibleWith(T, typesOfExps(s, exps)) 
    | error $[Not all elements are compatible with type [T]] @exps,
    @tsc.type := SET(T).
        
rules // Cast
   typeOfExp(s, exp@Cast(e, t)) = T1 :- {T2}
    typeOfSort(s, t) == T2,
    subtype(T2, T1) | error $[type of expression [T2] does not match expected type [T1]].

  
