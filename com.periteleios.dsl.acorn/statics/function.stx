module statics/function

imports statics/base
imports statics/type
imports statics/entity
imports statics/core

imports signatures/function-sig
imports signatures/core-sig

signature
  constructors   
    FuncType : list(TYPE) * TYPE -> TYPE


rules // functions

  defOk(s, exp@FuncDef(x, Params(params), t, impl)) :- {s_func Ts T}
   new s_func, s_func -P-> s,
   typeOfParams(s_func, s, params) == Ts,
   typeOfSort(s, t) == T,
   declareFunc(s, x, FuncType(Ts, T)),
   subtype(typeOfSort(s, t), T).
       
  typeOfExp(s, exp@ThisCall2Exp(ThisCall(x, argExps))) = T  :- {Ts Ss}
    resolveFunc(s, x) == FuncType(Ts, T),
    typesOfExps(s, argExps) == Ss,
    subtypes(Ss, Ts).
    
  resolveFunc : scope * string -> TYPE
  resolveFunc(s, x) = T :- {x'}
    typeOfDecl of Function{x} in s |-> [(_, (Function{x'}, T))]
    | error $[Function [x] is not defined],
    @x.ref := x'.
    
