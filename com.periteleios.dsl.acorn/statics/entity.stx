module statics/entity

imports statics/base
imports statics/type
imports statics/attribute

imports signatures/core-sig
imports signatures/entity-sig

rules // entity declaration

  // entity x : super 
  defOk(s, exp@Entity(x, super, mixins, bodydecs, key)) :- {s_entity s_super entity_scopes}
    new s_entity, s_entity -P-> s,
    extendsOk(s, s_entity, super),
    mixinsOk(s, s_entity, mixins),
    keyOk(s_entity, s, key),
    declEntity(s, s_entity, x, bodydecs).
    
   defOk(s, exp@AbstractEntity(x, super, mixins)) :- {s_entity s_super entity_scopes}
    new s_entity, s_entity -P-> s,
    extendsOk(s, s_entity, super),
    mixinsOk(s, s_entity, mixins),
    declAbstractEntity(s, s_entity, x).
 
    
  declEntity : scope * scope * string * list(AttributeDeclaration)
  declEntity(s, s_entity, entity_name, bodydecs) :- {entity_scopes}
    validEntityName(s_entity, entity_name),
    s -> Type{entity_name} with typeOfDecl ENTITY(s_entity),
    typeOfDecl of Type{entity_name} in s |-> [(_, (_, ENTITY(s_entity)))] 
    | error $[Entity [entity_name] is defined multiple times] @entity_name,
    declEntityAttribute(s_entity, bodydecs).
    
  declAbstractEntity : scope * scope * string 
  declAbstractEntity(s, s_entity, entity_name) :- {entity_scopes}
    validEntityName(s_entity, entity_name),
    s -> Type{entity_name} with typeOfDecl ENTITY(s_entity),
    typeOfDecl of Type{entity_name} in s |-> [(_, (_, ENTITY(s_entity)))] 
    | error $[Entity [entity_name] is defined multiple times] @entity_name.
  
    
  validEntityName : scope * string
  validEntityName(s, x) :-
    equalB(isSimpleType(typeOfSort(s, SimpleSort(x))), FALSE()) 
    | error $[Entity name [x] is not allowed] @x,
    x != "Entity" | error $[Entity name [x] is not allowed] @x.
  
  
  noCircularInheritance : scope
  noCircularInheritance(s_ent) :- {res}
    query () filter INHERIT+ and { s :- s == s_ent }
             min $ < INHERIT
             in s_ent |-> res,
    res == [].
    
     
  keyOk : scope * scope * Identification
  keyOk(s_bnd, s_ctx, Identification(x)) :- {T}
   attributeReference(s_bnd, x) == T | error $[Key be must a defined attribute].
   
  extendsOk : scope * scope * Extends 
  extendsOk(_, _, NoExtends()).
  extendsOk(s, s_entity, exp@Extends(parent)) :- {s_super}
     noCircularInheritance(s_entity) | error $[Circular inhertitance detected],
     typeOfDecl of Type{parent} in s |-> [(_, (_, ENTITY(s_super)))],
     s_entity -INHERIT-> s_super.
  
 mixinsOk : scope * scope * Mixins
 mixinsOk(_, _, NoMixins()).
 mixinsOk(s, s_entity, Mixins(x)) :- {s_pc}
    typeOfDecl of Type{x} in s |-> [(_, (_, TRAIT(s_pc)))] 
    | error $[Trait [x] is not defined],
    s_entity -INHERIT-> s_pc.
    
rules // resolve reference types

  attributeReference : scope * string -> TYPE
  attributeReference(s, x) = t :- {x'}
    typeOfDecl of Variable{x} in s |-> [(_, (Variable{x'}, t))|_] 
    | error $[Attribute [x] is not defined],
    @x.ref := x'.

rules // subtyping

  typeCompatibleB(ENTITY(s_sub), ENTITY(s_super)) = inherits(s_sub, s_super).
  
  inheritEdgesAmount : scope * scope -> int
  inheritEdgesAmount(s_sub, s_super) = pathLength(p) :-
    query () filter INHERIT* and { s :- s == s_super }
             min $ < INHERIT
             in s_sub |-> [(p, _)].
  
  
   
  

    