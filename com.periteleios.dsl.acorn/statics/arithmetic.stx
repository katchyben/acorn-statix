module statics/arithmetic

imports statics/base
imports statics/type
 
imports signatures/arithmetic-sig
  
rules
  // (e1 + e2)
  typeOfExp(s, exp@Add(e1, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    lubForAdd(T1, T2) == T,
    T != UNTYPED() | error $[Wrong operand types for operator Add: [e1] has type [T1],[e2] has type [T2]],
    @exp.type := T.
  
  // (e1 - e2)
  typeOfExp(s, exp@Sub(e1, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) == T,
    T != UNTYPED() | error $[Wrong operand types for operator Sub: [e1] has type [T1],[e2] has type [T2]],
    @exp.type := T.

  // (e1 * e2)
  typeOfExp(s, exp@Mul(e1, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) == T,
    T != UNTYPED() | error $[Wrong operand types for operator Mul: [e1] has type [T1],[e2] has type [T2]],
    @exp.type := T.

  // (e1 / e2)
  typeOfExp(s, exp@Div(e1, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) == T,
    T != UNTYPED() | error $[Wrong operand types for operator Div: [e1] has type [T1],[e2] has type [T2]],
    @exp.type := T.

  // (e1 % e2)
  typeOfExp(s, exp@Mod(e1, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    equalNumericType(T1, T2) == T,
    T != UNTYPED() | error $[Wrong operand types for operator Mod: [e1] has type [T1],[e2] has type [T2]],
    @exp.type := T.

   
  rules // utils

  lubForAdd : TYPE * TYPE -> TYPE
  lubForAdd(T1, T2) = equalNumericType(T1, T2).
  lubForAdd(STRING(), _) = STRING().
  lubForAdd(_, STRING()) = STRING().

  equalNumericType : TYPE * TYPE -> TYPE
  equalNumericType(_, _) = UNTYPED().
  equalNumericType(INT(), INT()) = INT().
  equalNumericType(INT(), LONG()) = LONG().
  equalNumericType(LONG(), INT()) = LONG().
  equalNumericType(LONG(), LONG()) = LONG().
  equalNumericType(FLOAT(), FLOAT()) = FLOAT().

 
    
    
  