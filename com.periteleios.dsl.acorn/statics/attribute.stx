module statics/attribute

imports statics/base
imports statics/type
imports statics/facet

imports signatures/attribute-sig
imports signatures/facet-sig


rules
  declAttributes maps declAttribute(*, list(*), list(*))
  declAttribute : scope * string * TYPE
  declAttribute(s, x, sortType) :-
    validAttributeName(x),
    declVar(s, x, sortType),
    noDuplicateVarDefsInSuper(s, x) | error $[Cannot override existing entity property [x]] @x.
  
  
  validAttributeName : string
  validAttributeName(x) :-
    x != "id"       | error $[Cannot override the builtin property [x]] @x,
    x != "version"  | error $[Cannot override the builtin property [x]] @x,
    x != "created"  | error $[Cannot override the builtin property [x]] @x,
    x != "modified" | error $[Cannot override the builtin property [x]] @x,
    x != "class"    | error $[Cannot use the reserved property name [x]] @x.
    
 rules // entity body declaration

  declAttributeDeclaration : scope * AttributeDeclaration
  declAttributeDeclaration(_, _) :- false | error $[This entity body declaration is not yet implemented].
  declEntityAttribute maps declAttributeDeclaration(*, list(*))

   // attribute
  declAttributeDeclaration(s, Attribute(x, t, constraints)) :- {T}
    typeOfSort(s, t) == T,
    inequalType(T, UNTYPED()) | error $[Cannot resolve type [t]] @t,
    constraintsOk(s, constraints),
    declAttribute(s, x, T).

  // derived attribute
  declAttributeDeclaration(s, DerivedAttribute(x, t, exp)) :- {T d_scope}
    new d_scope, d_scope -P-> s,
    typeOfSort(s, t) == T,
    equalType(T, typeOfExp(s, exp)) | error $[Expression [exp] must be of type [t]] @exp,
    declAttribute(s, x, T).
    
 rules
   constraintsOk : scope * Constraints 
   facetCallOk : scope * FacetCall
   facetCallsOk maps facetCallOk(*, list(*))
   
   constraintsOk(s, NoConstraints())  :- true.
   constraintsOk(s, Constraints(exps))  :- 
     facetCallsOk(s, exps).
     
   facetCallOk(s, FacetCall(x, exps))  :- {Ts}
     resolveFacet(s, x) == FacetType(Ts),
     typesOfExps(s, exps) == Ts.
  

       
 
 