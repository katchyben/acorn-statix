module statics/core

imports statics/base
imports statics/type

imports signatures/core-sig
      
rules
    
   declOk(s, Module(m, defns)) :- {s_mod}
     new s_mod, s_mod -P-> s,
     declareMod(s, m, MOD(s_mod)),
     defsOk(s_mod, defns).
     
   defOk(s, Import(p)) :- {s_mod s_end}
     typeOfModRef(s, p) == MOD(s_mod),
     s -IMPORT-> s_mod.
                
rules

  declareMod : scope * Id * TYPE
  typeOfModRef : scope * Id -> TYPE
  
  declareMod(s, x, T) :- 
    s -> Mod{x} with typeOfDecl T,
    typeOfDecl of Mod{x} in s |-> [(_, (_, T))] 
      | error $[Duplicate definition of module [x]], 
    @x.type := T.
    
  typeOfModRef(s, x) = T :- {x'} 
    typeOfDecl of Mod{x} in s |-> [(_, (x', T))|_]
      | error $[Module [x] not defined],
    @x.type := T, @x.ref := x'.
    
    
 rules
  typeOfParam : scope * scope * Param -> TYPE
  typeOfParams maps typeOfParam(*, *, list(*)) = list(*)
  
  /*typeOfParam(s_func, _, Param(t)) = T :-
    typeOfSort(s_func, t) == T.*/

  typeOfParam(s_func, s_mod, Param(x, t)) = T :- 
    typeOfSort(s_func, t) == T,
    declVar(s_func, x, T).
   
  

