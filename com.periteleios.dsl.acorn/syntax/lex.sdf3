module lex

imports base

lexical syntax

  VarId = Id
  FAVarId = VarId
  FunId = Id
  Id = [a-zA-Z] [a-zA-Z0-9\_]*
  ExtendedId = [a-zA-Z0-9\-\_\.]+
  ModuleName = {ExtendedId "/"}+
  QId = [a-zA-Z\-\_] ("."? [a-zA-Z0-9\-\_\/])*

lexical restrictions

  Id -/- [a-zA-Z0-9\_]
  ModuleName -/- [a-zA-Z0-9\/]
  QId -/- [a-zA-Z0-9\-\_\.\/]
  

lexical syntax

  INT = "-"? [0-9]+
  LONG = "-"? [0-9]+ "L"
  FLOAT = "-"? FloatDigits ExponentPart? [fFdD]?
  FloatDigits = [0-9]* "." [0-9]+
  FloatDigits = [0-9]+
  ExponentPart = [eE] SignedInteger
  SignedInteger = [\+\-]? [0-9]+
  FLOAT = "-"? [0-9]+ {reject}
  FloatDigits = "." {reject}

lexical restrictions

  INT -/- [0-9]
  INT -/- [L]             // to avoid longs getting parsed as an integer followed by a template call
  INT -/- [eEfFdD]        // to avoid floats getting parsed as an integer followed by a template call
  FLOAT -/- [fFdD]
  FloatDigits -/- [0-9]
  SignedInteger -/- [0-9]
  
//lexical sorts STRING
lexical syntax
  STRING         = "\"" StringChar* "\"" 
  StringChar     = ~[\"\n] 
  StringChar     = "\\\"" 
  StringChar     = BackSlashChar 
  BackSlashChar  = "\\" 
lexical restrictions
  BackSlashChar -/- [\"] // Backslash chars in strings may not be followed by "



context-free syntax
%% SimpleExp: specific commonly occuring expressions allowed directly after '~' inside string
%% allowing all expressions directly after '~' causes too many ambiguities
%% parentheses expression is used as delimiter for inserting any expression
%% allowed after '~': var/fieldaccess/thiscall/call/brackets a, a.b, a(), a.b(), (exp)
%% a '.' after a SimpleExp must be rejected as part of String to avoid amb, e.g. not allowed: "~a."
%% in these cases, use '()' if a '.' is needed as part of the string,       e.g.     allowed: "~(a)."

  SimpleExp.SimpleVar = Id
  SimpleExp.SimpleFieldAccess = <<SimpleExp> . <Id>>



lexical syntax
  LAYOUT     = [\ \t\n\r]
  LAYOUT     = "//" ~[\n\r]* NewLineEOF
  LAYOUT     = "/*" InsideComment* "*/"
  InsideComment  = ~[\*]
  InsideComment  = CommentChar
  CommentChar    = [\*]
  NewLineEOF = [\n\r]
  NewLineEOF = EOF
  EOF        =

lexical restrictions
  CommentChar -/- [\/]
  EOF         -/- ~[]

context-free restrictions

  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]


lexical sorts

  SimpleSortLex GenericSortLex

lexical syntax

  SimpleSortLex = [A-Z] [a-zA-Z0-9\_]*
  GenericSortLex = Id
  GenericSortLex = "Ref" {reject}

lexical restrictions

  SimpleSortLex -/- [a-zA-Z0-9\_]
