module variable

imports base

context-free sorts
  FAExp Mapping
  
context-free syntax
  
  Exp.Var = VarId
  Exp.FieldAccess = [[FAExp] . [Id]]
  Exp.CollectionIndex = [[Exp] \[ [Exp] \]]
  FAExp.FAExp = [[Exp]]
  FAExp.FAVar = [[FAVarId]]
  Exp.Cast = [[Exp] as [Sort]] 
  
  Exp.VarDecl = [ [VarId] : [Sort]]
  Exp.VarDeclInit = [ [VarId] : [Sort] = [Exp]]
  Exp.VarDeclInitInferred = [[VarId] = [Exp]]

  Exp.MapCreation = [ [Mapping+] ]
  Mapping.Mapping = [[Exp] -> [Exp]]
  Exp.ListCreation = [\[ [{Exp ","}*] \]]
  Exp.SetCreation = [{ [{Exp ","}+] }]
  
  Exp.TypedListCreation = [List \[ [Sort] \] ( [{Exp ","}*] )]
  Exp.TypedSetCreation = [Set \[ [Sort] \] ( [{Exp ","}*] )]

lexical syntax

  VarId = "List" {reject}
  VarId = "Set" {reject}
  
lexical syntax

  VarId = "this" {reject}
  VarId = "cast" {reject}


context-free priorities

  FAExp.FAExp <0> .> Exp.Var
  

template options
  VarId = keyword {reject}
  keyword -/- [a-zA-Z0-9]
  